version: 2.1

orbs:
  aws-cli: circleci/aws-cli@0.1.9
  aws-ecs: circleci/aws-ecs@0.0.6

# Save prerequisites cache using pattern from https://circleci.com/docs/2.0/caching/
save_cache: &save_cache
  key: cache-v1-{{ .Branch }}-{{ checksum "backend/poetry.lock" }}-{{ checksum "frontend/package-lock.json" }}
  paths:
    - /root/.cache
    - /home/circleci/.cache
    - /root/.npm

# Restore saved prerequisites cache using pattern from https://circleci.com/docs/2.0/caching/
restore_cache: &restore_cache
  keys:
    # when lock file changes, use increasingly general patterns to restore cache
    - cache-v1-{{ .Branch }}-{{ checksum "backend/poetry.lock" }}-{{ checksum "frontend/package-lock.json" }}
    - cache-v1-{{ .Branch }}-{{ checksum "backend/poetry.lock" }}-
    - cache-v1-{{ .Branch }}-
    - cache-v1-

jobs:
  build:
    docker:
      - image: circleci/python:3.7.2-node-browsers
    steps:
      - checkout
      - restore_cache:
          <<: *restore_cache
      - run:
          name: Setup poetry
          command: sudo pip install poetry
      - run:
          name: Install dependencies
          command: make install
      - save_cache:
          <<: *save_cache
      - run:
          name: Lint all code
          command: make lint
      - run:
          name: Unit tests & coverage
          command: make coverage

      - setup_remote_docker
      - run:
          name: Bring up all docker containers and test network reachability
          command: |
            set -x
            docker-compose up -d
            # backend
            docker run --network container:api appropriate/curl \
              -s --retry 10 --retry-delay 1 --retry-connrefused http://localhost:80/
            # frontend
            docker run --network container:static appropriate/curl \
              -s --retry 10 --retry-delay 1 --retry-connrefused http://localhost:80/
            # database
            docker run --network container:db appropriate/nc \
              -z -v -w 10 localhost 5432
      - run:
          name: Run integration tests
          command: make test-integration

  deploy:
    docker:
      - image: circleci/python:3.7.2-node-browsers
    steps:
      - checkout
      - aws-cli/install
      - aws-cli/configure
      - run:
          name: Setup environment
          command: |
            echo 'export TAG="0.0.${CIRCLE_BUILD_NUM}-$(git rev-parse --short HEAD)"' >> $BASH_ENV
      - run:
          name: Build containers and push to ECR
          command: make docker-build-push
      - aws-ecs/update-service:
          family: "static-${CIRCLE_BRANCH}"
          cluster-name: "maf"
          service-name: "static-${CIRCLE_BRANCH}-service"
          container-image-name-updates: "container=static-${CIRCLE_BRANCH},tag=${TAG}"
      - run:
          name: Run smoke tests
          command: make test-integration

# Default workflow filter to trigger on develop and master
branch_filters: &filter_deploy
  filters:
    branches:
      only:
        - master
        - develop

# This syntax is from CircleCI 1.0 but it works on 2.0 per
# https://discuss.circleci.com/t/experimental-branch-notifications-from-1-0/12964
experimental:
  notify:
    branches:
      only:
        - master
        - develop

workflows:
  version: 2
  mafpoc:
    jobs:
      - build:
          context: maf

      - deploy:
          <<: *filter_deploy
          context: maf
          requires:
            - build

